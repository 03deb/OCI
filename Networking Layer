Networking Diagram -> https://k21academy.com/wp-content/uploads/2018/10/PublicPrivateSubnet_D2-e1603279823526.png

{ Load Balancer }

A Load Balancer in OCI is a fully managed, highly available network service that automatically distributes incoming application traffic across multiple backend resources
-> No single server gets overwhelmed
-> Applications run faster and stay available even if one server fails
Example: Think of it like a traffic cop standing at a fork in the road, directing cars (requests) to less busy streets (servers).

# In Oracle Cloud Infrastructure (OCI), the OCI Load Balancer is a fully managed, highly available service that distributes traffic across multiple compute instances (VMs).
It supports:
Layer 4 (TCP) - Network-level traffic
Layer 7 (HTTP/HTTPS) - Application-level traffic

# Types of OCI Load Balancers
-> Public Load Balancer: Exposes applications to the internet; has a public IP address.
-> Private Load Balancer: Used for internal traffic within a Virtual Cloud Network (VCN); has a private IP address.

# Why Do We Use a Load Balancer?
-> High Availability: If one backend server fails, traffic is rerouted to healthy servers.
-> Scalability: Easily handle more traffic by adding more backend servers without changing client configuration.
-> Fault Tolerance: Minimizes application downtime.
-> Security: Hides backend server details (IP, architecture) from clients.
-> Simplified Management: Centralizes traffic management, SSL termination, and routing logic.
-> Efficient Resource Utilization: Distributes workloads evenly among backend resources.

# Real-World Example: Hosting a Website
Scenario: You're building a shopping website like Amazon.
You deploy:
• 3 Compute Instances (VMs) running your website's backend
Problem: If you send all traffic to only one of them, it may slow down or crash.

Solution: Add a Load Balancer
You set up a Public Load Balancer in front of the 3 instances.

      Now:
                      Clients (Internet)
                            |
                      [Public IP: Load Balancer]
                            |
                      --------------------------
                      |           |           |
                      VM1       VM2         VM3


# What Happens if We Use a Load Balancer:
1. A user visits your website.
2. The Load Balancer receives the request.
3. It checks which backend server is healthy and less busy.
4. Forwards the request accordingly.
If one backend goes down, traffic automatically routes to the remaining healthy ones - users won't even notice.

# What Happens If We Don’t Use a Load Balancer?
1. Single Point of Failure: If a backend server fails, users lose access.
2. Maintenance Complexity: Updating or scaling requires manual reconfiguration for clients.
3. No Health Checks: Clients may connect to unhealthy or offline servers.
4. Poor Scalability: Hard to handle spikes in user traffic efficiently.
5. Limited Security: Exposes backend server IPs and structure to the public.

# In summary:
A Load Balancer in OCI is essential for building reliable, scalable, and secure cloud-native applications. It simplifies management, enhances fault tolerance, and hides 
infrastructure details from users, making it a best practice for any multi-instance deployment.

___________________________________________________________________________________________________________________________________________________________________________

Here's a breakdown of the 7 layers:

1. Physical Layer:
Deals with the physical connection between devices, including the transmission of raw bitstreams over a physical medium (cables, etc.). 

2. Data Link Layer:
Responsible for error-free transfer of data frames between two directly connected nodes, handling access to the physical medium. 

3. Network Layer:
Manages the routing of data packets between different networks, using logical addresses (IP addresses) to find the best path. 

4. Transport Layer:
Provides reliable or unreliable delivery of data segments, managing flow control, error control, and segmentation/desegmentation. 

5. Session Layer:
Establishes, manages, and terminates connections (sessions) between applications. 

6. Presentation Layer:
Handles data representation, including encryption, decryption, compression, and translation of data formats to ensure interoperability between systems. 

7. Application Layer:
The interface between the user and the network, providing services like email, file transfer, and web browsing. 

# Network Layer (Layer 3) :-
The network layer works for the transmission of data from one host to the other located in different networks. It also takes care of packet routing i.e. selection 
of the shortest path to transmit the packet, from the number of routes available.

* Protocols at this Layer:
-> IPv4 / IPv6 (Internet Protocol): Provides logical addressing and routing.
-> ICMP (Internet Control Message Protocol): Used for sending error messages and operational information (e.g., ping).
-> IPsec: For secure IP communications.

Example:
Imagine you send an email from your office computer in New York to a colleague in London. The Network Layer on your computer assigns the destination IP address 
(for the London computer) and determines the route—possibly through several routers and networks—until the email reaches its destination.

Real-life analogy:
It’s like addressing a letter with both the sender and receiver’s street addresses and relying on the postal system to determine the best route from your city to 
another country.

# Transport Layer (Layer 4) :-
It is responsible for the end-to-end delivery of the complete message. The transport layer also provides the acknowledgment of the successful data transmission 
and re-transmits the data if an error is found.

* Protocols at this Layer:
-> TCP (Transmission Control Protocol): Reliable, connection-oriented protocol (used for web browsing, email, file transfers).
-> UDP (User Datagram Protocol): Unreliable, connectionless protocol (used for real-time applications like video, voice calls, online games).

Example:
When you open a website (like www.example.com), your browser uses TCP to connect to the web server. TCP ensures that all the pieces (segments) of the webpage 
arrive intact and in the right order. If a piece is missing or corrupted, TCP requests it again.

Real-life analogy:
It’s like a phone conversation where both people confirm that they hear each other clearly and ask for repetition if something is missed.

In summary:
The Network Layer finds the best path for data across networks using IP addresses.
The Transport Layer ensures data gets to the right application, reliably and in order, using protocols like TCP and UDP.
___________________________________________________________________________________________________________________________________________________________________________

{ Network Load Balancer }

-> A Network Load Balancer (NLB) in OCI is a highly performant, low-latency load balancer that Operates at Layer 3/4 (network and transport layers) of the OSI model, 
specifically handling TCP, UDP, and ICMP traffic.

✅ Use Case Example (Real-World) :
Scenario: Gaming Server Load Balancing
Suppose you are running a multiplayer game server that uses UDP for fast communication between players.
You deploy:
-> 3 compute instances in OCI running your game backend (UDP-based)
-> You want to distribute player traffic evenly across these instances

Solution: Use a Network Load Balancer
PLAYER → NLB (UDP port 9000) → Game Server 1 
(UDP 9000)                   → Game Server 2                            
(UDP 9000)                   → Game Server 3 

Without NLB:
-> Each player is assigned a specific game server’s IP and port.
-> If a server fails, those players are disconnected and can’t reconnect automatically.

Why Network LB here?
-> HTTP Load Balancer (Layer 7) cannot handle UDP
-> NLB handles it efficiently without inspecting the content


Why is NLB Necessary?
-> Essential for Non-HTTP Traffic: If your application uses TCP/UDP protocols (like databases, custom apps, or gaming servers), NLB is required since an application
load balancer might not support or efficiently handle these protocols.
-> Performance-Critical Environments: For scenarios demanding ultra-low latency and very high throughput, NLB is the best fit.
-> Source IP Requirements: Some security or audit requirements demand that backend servers see the real client IP, which NLB provides.
-> Simplicity: For straightforward, protocol-agnostic traffic distribution (no need for SSL offloading, path-based routing, etc.), NLB is simpler and more efficient.


When to Use NLB in OCI
-> For any workload that is not web-based (non-HTTP/HTTPS), such as databases, VoIP, custom TCP/UDP applications, and gaming.
-> When ultra-low latency and high throughput are required.
-> When backend applications require the client’s source IP.
-> For applications needing to handle millions of concurrent connections.


How is NLB Different from "Normal" (Application) Load Balancer?

Feature                |	Network Load Balancer (NLB)       |	Application Load Balancer (ALB) (OCI LBaaS)
------------------------------------------------------------------------------------------------------------
OSI Layer	           |  Layer 4 (Transport/Network)           |	Layer 7 (Application)
Supported Protocols    |  TCP, UDP, ICMP	                      | HTTP, HTTPS, WebSockets, SSL/TLS termination
Traffic Routing	     |  Based on IP, port                     | Based on URL, Host, Cookies, Application data
SSL Termination	     |  No         	                      | Yes
Source IP Preservation |  Yes	                                  | No (unless using X-Forwarded-For header)
Performance	           |  Very high, low latency	          | Moderate, higher processing due to application logic
Health Checks	     |  Basic (TCP/UDP)	                      | Advanced (HTTP, HTTPS, path-based)
Use Cases	           |  Non-HTTP workloads, gaming, VoIP      | Web apps, APIs, HTTPS termination, cookie-based routing


____________________________________________________________________________________________________________________________________________________________________________

{ Application Level Load Balancer (ALB)? }
-> An Application Level Load Balancer operates at the Application Layer (Layer 7) of the OSI model. This means it can inspect and make decisions based on the content of the 
application data (such as HTTP headers, cookies, URLs), not just on IP addresses and ports.

In OCI and other clouds, this is often just called a "Load Balancer" or "Layer 7 Load Balancer."


# Real-World Example: E-commerce Website
Let’s say you run an online store like Flipkart.
You have:
-> One backend for product listing: /products
-> One backend for shopping cart: /cart
-> One backend for checkout: /checkout
# Without Load Balancer:
Users talk directly to one server — bad for reliability and scalability.
# With Application-Level Load Balancer:
User → HTTPS Request → Load Balancer
      ├─> /products  → App Server 1
      ├─> /cart      → App Server 2
      └─> /checkout  → App Server 3

Here the load balancer reads the URL and forwards traffic to the correct backend.

# Key Features of Application Load Balancer
-> Content-based Routing: Routes requests based on URL, host, HTTP headers, cookies, etc.
-> SSL/TLS Termination: Can decrypt HTTPS traffic, offloading the work from backend servers.
-> Session Persistence (Sticky Sessions): Can keep a user’s requests going to the same backend server.
-> Advanced Health Checks: Can check specific URLs/endpoints for health, not just open ports.
-> WebSocket Support: Handles modern web communication protocols.
-> Rewrite/Redirect: Can modify headers or redirect requests.


Why Use an Application Load Balancer?
Flexibility: Route traffic based on application data (URLs, headers, cookies).
Security: Centralized SSL certificate management and traffic termination.
Health Monitoring: More precise health checks using HTTP responses.
Scalability: Easily add or remove backend servers as demand changes.
User Experience: Sticky sessions and content-based routing for better performance and reliability.

_____________________________________________________________________________________________________________________________________________________________________________



